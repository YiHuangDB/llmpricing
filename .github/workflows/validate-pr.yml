name: Validate Pull Request

on:
  pull_request:
    branches:
      - main
    paths:
      - 'data/llm-pricing.json'
      - 'scripts/**'
      - 'tests/**'

jobs:
  validate:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Validate JSON structure
        run: |
          echo "Validating JSON structure..."
          node -e "
          const fs = require('fs');
          const data = JSON.parse(fs.readFileSync('data/llm-pricing.json', 'utf-8'));
          
          // Validate structure
          if (!data.lastUpdated || !data.providers || !Array.isArray(data.providers)) {
            throw new Error('Invalid JSON structure');
          }
          
          // Validate each provider
          data.providers.forEach(provider => {
            if (!provider.name || !provider.website || !provider.models) {
              throw new Error('Invalid provider: ' + JSON.stringify(provider));
            }
            
            // Validate each model
            provider.models.forEach(model => {
              if (!model.name || !model.modelId || !model.pricing) {
                throw new Error('Invalid model: ' + JSON.stringify(model));
              }
              
              // Validate pricing
              if (typeof model.pricing.input !== 'number' || model.pricing.input < 0) {
                throw new Error('Invalid input price for ' + model.name);
              }
              if (typeof model.pricing.output !== 'number' || model.pricing.output < 0) {
                throw new Error('Invalid output price for ' + model.name);
              }
              
              // Validate context window
              if (typeof model.contextWindow !== 'number' || model.contextWindow <= 0) {
                throw new Error('Invalid context window for ' + model.name);
              }
            });
          });
          
          console.log('✅ JSON validation passed');
          "
      
      - name: Check for duplicate models
        run: |
          node -e "
          const fs = require('fs');
          const data = JSON.parse(fs.readFileSync('data/llm-pricing.json', 'utf-8'));
          
          const duplicates = [];
          
          data.providers.forEach(provider => {
            const seen = new Set();
            provider.models.forEach(model => {
              if (seen.has(model.modelId)) {
                duplicates.push(provider.name + ': ' + model.modelId);
              }
              seen.add(model.modelId);
            });
          });
          
          if (duplicates.length > 0) {
            console.error('❌ Duplicate models found:');
            duplicates.forEach(d => console.error('  - ' + d));
            process.exit(1);
          }
          
          console.log('✅ No duplicate models');
          "
      
      - name: Run tests
        run: |
          npx playwright install chromium
          npx playwright test tests/pricing-website.spec.js --project=chromium
      
      - name: Generate diff summary
        if: always()
        run: |
          echo "## Changes Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Count changes
          git diff origin/main -- data/llm-pricing.json | grep "^+" | grep -v "^+++" | wc -l | xargs echo "- Lines added:" >> $GITHUB_STEP_SUMMARY
          git diff origin/main -- data/llm-pricing.json | grep "^-" | grep -v "^---" | wc -l | xargs echo "- Lines removed:" >> $GITHUB_STEP_SUMMARY
          
          # Show statistics
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Current Statistics" >> $GITHUB_STEP_SUMMARY
          jq '{
            providers: .providers | length,
            total_models: [.providers[].models | length] | add,
            last_updated: .lastUpdated
          }' data/llm-pricing.json >> $GITHUB_STEP_SUMMARY
      
      - name: Comment PR
        uses: actions/github-script@v7
        if: github.event.pull_request
        with:
          script: |
            const fs = require('fs');
            const data = JSON.parse(fs.readFileSync('data/llm-pricing.json', 'utf-8'));
            
            const stats = {
              providers: data.providers.length,
              models: data.providers.reduce((sum, p) => sum + p.models.length, 0),
              lastUpdated: data.lastUpdated
            };
            
            const comment = `## 📊 Pricing Data Validation Results
            
            ✅ **All validations passed**
            
            ### Statistics
            - **Providers**: ${stats.providers}
            - **Total Models**: ${stats.models}
            - **Last Updated**: ${new Date(stats.lastUpdated).toLocaleString()}
            
            ### Checks Performed
            - ✅ JSON structure validation
            - ✅ No duplicate models
            - ✅ Valid pricing ranges
            - ✅ Valid context windows
            - ✅ All required fields present`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });