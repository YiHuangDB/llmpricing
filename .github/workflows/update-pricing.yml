name: Update LLM Pricing Data

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      providers:
        description: 'Specific providers to update (comma-separated, or "all")'
        required: false
        default: 'all'
        type: string
      force_update:
        description: 'Force update even if no changes detected'
        required: false
        default: false
        type: boolean
  push:
    branches:
      - main
    paths:
      - 'scripts/update-pricing.js'
      - '.github/workflows/update-pricing.yml'

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  update-pricing:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Install dependencies
        run: |
          npm ci
          npx playwright install chromium
          npx playwright install-deps chromium
      
      - name: Create results directory
        run: mkdir -p test-results
      
      - name: Run pricing update script
        id: update_prices
        run: |
          node scripts/update-pricing.js
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          COHERE_API_KEY: ${{ secrets.COHERE_API_KEY }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          PROVIDERS: ${{ github.event.inputs.providers || 'all' }}
          FORCE_UPDATE: ${{ github.event.inputs.force_update || 'false' }}
        continue-on-error: true
      
      - name: Validate JSON structure
        run: |
          echo "Validating JSON structure..."
          node -e "
          const fs = require('fs');
          const data = JSON.parse(fs.readFileSync('data/llm-pricing.json', 'utf-8'));
          
          // Validate structure
          if (!data.lastUpdated || !data.providers || !Array.isArray(data.providers)) {
            throw new Error('Invalid JSON structure');
          }
          
          // Check each provider
          data.providers.forEach(provider => {
            if (!provider.name || !provider.models || !Array.isArray(provider.models)) {
              throw new Error('Invalid provider structure: ' + provider.name);
            }
            
            // Check each model
            provider.models.forEach(model => {
              if (!model.name || !model.pricing || typeof model.pricing.input !== 'number') {
                throw new Error('Invalid model structure: ' + model.name);
              }
            });
          });
          
          console.log('‚úÖ JSON validation passed');
          console.log('Providers:', data.providers.length);
          console.log('Total models:', data.providers.reduce((sum, p) => sum + p.models.length, 0));
          "
      
      - name: Generate update report
        if: always()
        run: |
          node -e "
          const fs = require('fs');
          
          // Read the scraping report if it exists
          let report = { status: 'unknown', changes: [] };
          try {
            if (fs.existsSync('test-results/scraping-report.json')) {
              report = JSON.parse(fs.readFileSync('test-results/scraping-report.json', 'utf-8'));
            }
          } catch (e) {
            console.error('Could not read scraping report:', e);
          }
          
          // Create summary
          const summary = {
            timestamp: new Date().toISOString(),
            success: ${{ steps.update_prices.outcome == 'success' }},
            ...report
          };
          
          fs.writeFileSync('test-results/update-summary.json', JSON.stringify(summary, null, 2));
          
          // Output for GitHub Actions summary
          console.log('## Update Summary');
          console.log('- Status:', summary.success ? '‚úÖ Success' : '‚ùå Failed');
          console.log('- Timestamp:', summary.timestamp);
          if (summary.totalProviders) {
            console.log('- Providers updated:', summary.totalProviders);
            console.log('- Models found:', summary.totalModels);
          }
          if (summary.errors && summary.errors.length > 0) {
            console.log('- Errors:', summary.errors.join(', '));
          }
          "
      
      - name: Check for changes
        id: check_changes
        run: |
          if git diff --quiet data/llm-pricing.json; then
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No changes detected in pricing data"
          else
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected in pricing data"
            git diff --stat data/llm-pricing.json
          fi
      
      - name: Commit and push changes
        if: steps.check_changes.outputs.changes == 'true' || github.event.inputs.force_update == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Add changes
          git add data/llm-pricing.json
          
          # Create commit message with details
          COMMIT_MSG="üîÑ Update LLM pricing data [automated]

          Updated at: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          Workflow run: ${{ github.run_number }}
          Triggered by: ${{ github.event_name }}"
          
          git commit -m "$COMMIT_MSG" || echo "No changes to commit"
          
          # Push changes
          git push origin main
      
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: update-reports
          path: |
            test-results/
            data/llm-pricing.json
      
      - name: Create issue on failure
        if: failure() && github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            const title = `üö® Pricing Update Failed - ${new Date().toISOString().split('T')[0]}`;
            const body = `## Automated Pricing Update Failed
            
            **Workflow Run:** [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            **Time:** ${new Date().toISOString()}
            **Triggered by:** ${{ github.event_name }}
            
            ### Error Details
            The automated pricing update workflow failed. Please check the logs for more details.
            
            ### Action Required
            - Review the workflow logs
            - Check if provider websites have changed their structure
            - Update scraping logic if necessary
            - Manually run the workflow after fixes
            
            cc @${{ github.repository_owner }}`;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['bug', 'automated', 'pricing-update']
            });
      
      - name: Update GitHub Pages
        if: steps.check_changes.outputs.changes == 'true'
        uses: actions/deploy-pages@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  test-api:
    needs: update-pricing
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main
      
      - name: Test JSON API endpoint
        run: |
          # Test that the JSON file is valid and accessible
          echo "Testing JSON structure..."
          cat data/llm-pricing.json | jq '.' > /dev/null
          
          echo "‚úÖ JSON is valid"
          
          # Extract statistics
          echo "Extracting statistics..."
          jq '{
            providers: .providers | length,
            total_models: [.providers[].models | length] | add,
            last_updated: .lastUpdated
          }' data/llm-pricing.json
      
      - name: Generate README stats badge
        run: |
          # Count models
          MODEL_COUNT=$(jq '[.providers[].models | length] | add' data/llm-pricing.json)
          PROVIDER_COUNT=$(jq '.providers | length' data/llm-pricing.json)
          
          echo "![Models](https://img.shields.io/badge/Models-$MODEL_COUNT-blue)" > badges.md
          echo "![Providers](https://img.shields.io/badge/Providers-$PROVIDER_COUNT-green)" >> badges.md
          echo "![Updated](https://img.shields.io/badge/Updated-$(date -u +%Y--m--d)-orange)" >> badges.md

  notify:
    needs: [update-pricing, test-api]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Send notification
        if: github.event_name == 'schedule'
        run: |
          if [ "${{ needs.update-pricing.result }}" == "success" ]; then
            echo "‚úÖ Pricing update completed successfully"
          else
            echo "‚ùå Pricing update failed - check workflow logs"
          fi
      
      - name: Update workflow status badge
        run: |
          echo "Workflow status: ${{ needs.update-pricing.result }}"